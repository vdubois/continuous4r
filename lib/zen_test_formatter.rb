require 'rubygems'
# =====================================================
# Classe de formatage des resultats renvoyes par les
# differents resultats de ZenTest
# Author: Vincent Dubois
# =====================================================
class ZenTestFormatter

  # generates HTML for test detail label
  # <b>runner</b>:: test run
  # <b>test_type</b>:: test type
  def generate_runner_label(runner, test_type)
    "<td><a href='xdoclet/#{runner.gsub(/\//,'_')}.html' target='_blank'>#{runner}</a><br/><strong>run against</strong><br/><a href='xdoclet/#{"test/#{test_type}/#{runner.split("/")[2].gsub(Regexp.new(".rb"),"_test.rb")}".gsub(/\//,'_')}.html' target='_blank'>test/#{test_type}/#{runner.split("/")[2].gsub(Regexp.new(".rb"),"_test.rb")}</a></td>"
  end

  # generates HTML for test details columns
  # <b>number_of_errors</b>:: number of ZenTest errors found
  # <b>file_lines</b>:: array content of ZenTest log file
  # <b>start_line</b>:: start line of test
  # <b>end_line</b>:: end line of test
  def generate_zentest_detail_columns(number_of_errors, file_lines, start_line, end_line)
    html = "<td style='text-align: center;'><img src='images/icon_#{(number_of_errors.to_i == 0) ? 'success' : 'error'}_sml.gif'/></td><td style='text-align: center;'>#{number_of_errors}</td><td style='width: 75%;'><pre style='font-family: Courier New; font-size: 11px;'>"
    (start_line..end_line).to_a.each do |index|
      html << file_lines[index]
    end
    html << "</pre></td></tr>"
  end

  # runs a file implementation against a test file and returns details
  # <b>runner</b>:: the implementation file
  # <b>test_type</b>:: the test type
  # <b>i</b>:: index of test control
  def run_zentest_impl_against_test(runner, test_type, i)
    html = ""
    if File.exist?("#{RAILS_ROOT}/test/#{test_type}/#{runner.split("/")[2].gsub(Regexp.new(".rb"),"_test.rb")}")
      puts " Running ZenTest on #{runner} against test/#{test_type}/#{runner.split("/")[2].gsub(Regexp.new(".rb"),"_test.rb")}..."
      Utils.run_command("zentest -r #{runner} test/#{test_type}/#{runner.split("/")[2].gsub(Regexp.new(".rb"),"_test.rb")} > #{Continuous4r::WORK_DIR}/zentest.log")
      file_lines = File.read("#{Continuous4r::WORK_DIR}/zentest.log").split(/$/)
      start_line = 0
      #next if file_lines[start_line].nil?
      html << "<tr class='#{ i % 2 == 0 ? 'a' : 'b'}'>#{generate_runner_label(runner, test_type)}"
      while file_lines[start_line].index("Code Generated by ZenTest").nil?
        start_line = start_line + 1
      end
      end_line = start_line
      while file_lines[end_line].index("Number of errors detected").nil?
        end_line = end_line + 1
      end
      number_of_errors = file_lines[end_line][29..(file_lines[end_line].length - 1)]
      end_line = end_line - 1
      html << generate_zentest_detail_columns(number_of_errors, file_lines, start_line, end_line)
      i = i + 1
    end
    return html, i
  end

  # Methode qui permet de fabriquer le flux HTML a partir des flux console
  # de ZenTest
  def to_html
    files_controllers = Dir.glob("app/controllers/*_controller.rb")
    files_models = Dir.glob("app/models/*.rb")
    html = "<table class='bodyTable'><thead><th>Element</th><th>Pass</th><th>Errors</th><th>Generated class</th></thead><tbody>"
    i = 0
    files_controllers.each do |runner|
      ['functional','integration'].each do |test_type|
        myhtml, i = run_zentest_impl_against_test(runner, test_type, i)
        html << myhtml
      end
    end
    files_models.each do |runner|
      myhtml, i = run_zentest_impl_against_test(runner, test_type, i)
      html << myhtml
    end
    html << "</tbody></table>"
  end
end

